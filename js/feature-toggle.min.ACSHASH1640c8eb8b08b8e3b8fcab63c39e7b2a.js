'use strict';(()=>{const {DMCP:f}=window;void 0===f&&(window.DMCP={})})();(()=>{const {DMCP:f}=window;f.featureToggleHelpers={getGlobalProperty:function(d){if(d){var {globalProperties:e}=window;return(e=e&&e.globalProperties.find(g=>g[d]))&&e[d]}},contextToString:function(d={}){return null===d||"object"!==typeof d?"":`${Object.keys(d).sort().join("")}${Object.values(d).sort().join("")}`}}})();
(()=>{async function f(a,b){if(!a)return null;let c;try{c=await e.initialize(a,b,{bootstrap:"localStorage"})}catch(k){return null}return c}const {DMCP:d,LDClient:e}=window;var {featureToggleHelpers:g={}}=d;const {getGlobalProperty:m,contextToString:l}=g,h={};g=m("launchdarkly-client-id");class n{constructor({clientId:a=null,initialContext:b=null}){this.storeKey=Symbol(a);this.client=null;h[this.storeKey]={clientId:a,contextSnapshot:l(b)};this._store=new Proxy(h[this.storeKey],{set(){console.log("This is a read-only property")}});
this.init(a,b)}async init(a,b=null){const {clientId:c}=this._store;b&&c&&(a!==c&&(h[this.storeKey].clientId=a),(this.client=await f(a,b))||console.warn('Feature-toggle is working in "Bypassing mode"'))}isDiffer(a){return l(a)!==this._store.contextSnapshot}async getValue(a="",b=null,c=null){if(!c||!a)return b;this.client||await this.init(this._store.clientId,c);if(!this.client)return b;if(c&&this.isDiffer(c)){this.setSnapshot(c);try{await this.client.identify(c,null)}catch(p){return b}}let k;try{k=
await this.client.variation(a,b)}catch(p){return b}return k}setSnapshot(a){h[this.storeKey].contextSnapshot=l(a)}}d.featureToggle=new n({clientId:g,initialContext:null,defaultValues:{}})})();